 var addOld = function(x,y) {
	return x + y;
}

var addNew = (x,y) => x + y;

var max = (a,b) => {
	if (a > b) {
		return a;
	}
	else {
		return b;
	}
};

var max = (a,b) => (a > b) ? a : b;

var num = () => 666;
var doubleIt = x => x * 2;
var doubleIt = function(x) { return x * 2; }

var a = [3,5,7];
console.log( a.map( item => item * 2 ) );
console.log( [1,5,9].map( item => item * 2 ) );

//////////////////////////////////////

var objEventBad = {
	count: 11,
	postTimer: function() {
		setTimeout( function() {
			console.log(this.count);
		}, 1 );
	}
};
objEventBad.postTimer();

var objEventGood = {
	count: 11,
	postTimer: function() {
		setTimeout( () => {
			console.log(this.count);
		}, 1 );
	}
};
objEventGood.postTimer();


var objEventStrange = {
	count: 11,
	print: () => {
			console.log('PRINT: '+this.count);
	}
};
var count = "XXXX";
objEventStrange.print();
console.log(count, this.count, window.count);

/* Closure complex solutions:

var arr1 = [];
for (var i = 0; i < 5; ++i) {
  var obj = {
    x: i,
    print: function() {
      return () => console.log(this.x);   
    }
  }
  arr1.push(obj.print());
}

arr1[2](); 

function RetFunc(){
   var x = i;
   this.callMe = function(){
     console.log(x);
   };
 }
var arr = [];
for(var i = 0; i < 5; ++i){
  var obj = new RetFunc;
 arr.push(obj.callMe );
}
arr[2]();

*/
